'use strict';

var _ = require('lodash');

var ConfigService = {
  getItems: function getItems(groups) {
    return _.without(_.flattenDeep(_.map(groups, function (group) {
      return _.map(_.get(group, 'items', []), function (item) {
        if (!_.isEmpty(item)) {
          if (item.type === 'select_many') {
            return _.map(_.get(item, 'items', []), function (childItem) {
              if (!_.isEmpty(childItem)) {
                return childItem;
              }
            });
          }
          return item;
        }
      });
    })), null);
  },

  getItem: function getItem(groups, itemName) {
    var item = null;
    _.some(ConfigService.getItems(groups), function (otherItem) {
      if (otherItem.name === itemName) {
        item = otherItem;
        return true;
      }
    });
    return item;
  },

  evaluateWhen: function evaluateWhen(groups, when) {
    var checkWhen = function checkWhen(obj, value, ne) {
      var val = _.get(obj, 'value', null);
      if (ne) {
        return val && val.length > 0 ? val !== value : obj['default'] !== value;
      }
      return val && val.length > 0 ? val === value : obj['default'] === value;
    };

    if (when.length > 0) {
      var whenParts = when.split('=', 2);
      if (whenParts.length === 2) {
        var opNe = false;
        var itemName = whenParts[0];
        var itemValue = whenParts[1];
        if (itemName.substr(itemName.length - 1) === '!') {
          opNe = true;
          itemName = itemName.substr(0, itemName.length - 1);
        }

        var theItem = ConfigService.getItem(groups, itemName);
        if (theItem !== null) {
          var theItemWhen = _.get(theItem, 'when', '');
          // recursively evaluate whens
          if (theItemWhen.length > 0 && !ConfigService.evaluateWhen(groups, theItemWhen)) {
            return false;
          }
          return checkWhen(theItem, itemValue, opNe);
        }
      }
    }

    return true;
  },

  isVisible: function isVisible(groups, obj) {
    return !obj.hidden && ConfigService.isEnabled(groups, obj);
  },

  isEnabled: function isEnabled(groups, obj) {
    var when = _.get(obj, 'when', '');
    return when.length > 0 ? ConfigService.evaluateWhen(groups, when) : true;
  }
};

module.exports = ConfigService;
//# sourceMappingURL=ConfigService.js.map
