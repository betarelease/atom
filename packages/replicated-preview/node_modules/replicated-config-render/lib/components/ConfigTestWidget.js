'use strict';

var _ = require('lodash');
var classNames = require('classnames');
var React = require('react');

var ConfigService = require('../services/ConfigService');

var MockRequest = function MockRequest(callback) {
  this.timeout = setTimeout(callback, 2000);
};

MockRequest.prototype.abort = function () {
  clearTimeout(this.timeout);
};

var ConfigTestWidget = React.createClass({
  displayName: 'ConfigTestWidget',

  getInitialState: function getInitialState() {
    return {
      'resultText': '',
      'success': null,
      'testing': false
    };
  },

  handleTest: function handleTest(ev) {
    ev.preventDefault();

    this.setState({
      'testing': true,
      'resultText': ''
    });

    if (this.pendingRequest) {
      this.pendingRequest.abort();
    }

    var requestData = {
      'bound_group': this.props.boundGroup,
      'bound_item': this.props.boundItem,
      'command': this.props.command,
      'timeout': this.props.timeout || 0,
      'arg_fields': this.getArgs()
    };

    if (this.props.onTestProc) {
      this.pendingRequest = this.props.onTestProc(requestData, (function (success, resultText) {
        this.pendingRequest = null;
        this.setState({
          'testing': false,
          'success': success,
          'resultText': resultText
        });
      }).bind(this));
    } else {
      console.log('Running test proc', this.props.command, requestData); // eslint-disable-line no-console
      this.pendingRequest = new MockRequest((function () {
        this.setState({
          'testing': false,
          'success': true,
          'resultText': 'Success'
        });
      }).bind(this));
    }
  },

  getArgs: function getArgs() {
    var args = [];
    _.each(this.props.argFields, (function (field) {
      _.some(ConfigService.getItems(this.props.groups), function (item) {
        if (item.name === field) {
          // TODO: support multi value fields index
          if (item.type === 'file') {
            if (item.multiple) {
              args.push({
                field: item.name,
                value: item.multi_data && item.multi_data.length ? atob(item.multi_data[0]) : ''
              });
            } else {
              args.push({
                field: item.name,
                value: item.data ? atob(item.data) : ''
              });
            }
          } else {
            if (item.multiple) {
              args.push({
                field: item.name,
                value: item.multi_value && item.multi_value.length ? item.multi_value[0] : item['default']
              });
            } else {
              args.push({
                field: item.name,
                value: item.value && item.value.length > 0 ? item.value : item['default']
              });
            }
          }
          return true;
        }
        return false;
      });
    }).bind(this));
    return args;
  },

  render: function render() {
    var iconTesting = null;
    var iconSuccess = null;
    var iconFail = null;
    if (this.state.testing === true) {
      iconTesting = React.createElement('i', { className: 'fa fa-cog fa-spin' });
    } else {
      if (this.state.success === true) {
        iconSuccess = React.createElement('i', { className: 'fa fa-check-square' });
      }
      if (this.state.success === false) {
        iconFail = React.createElement('i', { className: 'fa fa-times-circle' });
      }
    }

    var statusClasses = classNames('test-status', {
      'text-success': !this.state.testing && this.state.success === true,
      'text-danger': !this.state.testing && this.state.success === false
    });

    return React.createElement(
      'div',
      { className: 'test-widget clearfix' },
      React.createElement(
        'div',
        null,
        React.createElement(
          'span',
          null,
          React.createElement(
            'a',
            { href: '#', onClick: this.handleTest, className: 'test-button btn btn-info btn-sm pull-left' },
            this.props.displayName ? this.props.displayName : 'Test'
          )
        ),
        React.createElement(
          'small',
          { className: statusClasses },
          iconTesting,
          ' ',
          iconSuccess,
          ' ',
          iconFail,
          ' ',
          this.state.resultText
        )
      )
    );
  }
});

module.exports = ConfigTestWidget;
//# sourceMappingURL=ConfigTestWidget.js.map
