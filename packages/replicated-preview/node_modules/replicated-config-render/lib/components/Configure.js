'use strict';

var _ = require('lodash');
var React = require('react');

var ConfigGroups = require('./ConfigGroups');
var ConfigService = require('../services/ConfigService');

var Configure = React.createClass({
  displayName: 'Configure',

  getInitialState: function getInitialState() {
    return {
      groups: this.props.groups
    };
  },

  componentDidMount: function componentDidMount() {
    this.triggerChange(this.getData(this.props.groups));
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.setState({ groups: nextProps.groups });
  },

  handleGroupsChange: function handleGroupsChange(groupName, itemName, value, data) {
    var getValues = function getValues(val) {
      if (!val) {
        return [];
      }
      return _.isArray(val) ? val : [val];
    };
    var getValue = function getValue(val) {
      if (!val) {
        return val;
      }
      return _.isArray(val) ? _.first(val) : val;
    };
    var groups = _.map(this.props.groups, function (group) {
      if (group.name === groupName) {
        group.items = _.map(group.items, function (item) {
          if (!(item.type in ['select_many', 'label', 'heading']) && item.name === itemName) {
            if (item.multiple) {
              item.multi_value = getValues(value);
              if (item.type === 'file') {
                item.multi_data = getValues(data);
              }
            } else {
              item.value = getValue(value);
              if (item.type === 'file') {
                item.data = getValue(data);
              }
            }
          } else {
            if (item.type !== 'select_one') {
              item.items = _.map(item.items, function (childItem) {
                if (childItem.name === itemName) {
                  if (childItem.multiple) {
                    childItem.multi_value = getValues(value);
                    if (childItem.type === 'file') {
                      childItem.multi_data = getValues(data);
                    }
                  } else {
                    childItem.value = getValue(value);
                    if (childItem.type === 'file') {
                      childItem.data = getValue(data);
                    }
                  }
                }
                return childItem;
              });
            }
          }
          return item;
        });
      }
      return group;
    });

    this.setState({ groups: groups });

    // TODO: maybe this should only be on submit
    this.triggerChange(this.getData(groups));
  },

  triggerChange: function triggerChange(data) {
    if (this.props.handleChange) {
      this.props.handleChange(data);
    }
  },

  getData: function getData(groups) {
    var getItemData = function getItemData(item) {
      var data = {
        name: item.name,
        value: '',
        multi_value: []
      };
      if (item.multiple) {
        if (item.multi_value && item.multi_value.length) {
          data.multi_value = item.multi_value;
        } else if (item['default']) {
          data.multi_value = [item['default']];
        }
      } else {
        if (item.value && item.value.length) {
          data.value = item.value;
        } else {
          data.value = item['default'];
        }
      }
      if (item.type === 'file') {
        data.data = '';
        if (item.multiple) {
          if (item.multi_data && item.multi_data.length) {
            data.multi_data = item.multi_data;
          } else {
            data.multi_data = [];
          }
        } else {
          data.data = item.data;
        }
      }
      return data;
    };

    var data = [];
    _.each(groups, function (group) {
      if (ConfigService.isEnabled(groups, group)) {
        _.each(group.items, function (item) {
          if (ConfigService.isEnabled(groups, item)) {
            if (item.type !== 'select_many') {
              data.push(getItemData(item));
            }
            if (item.type !== 'select_one') {
              _.each(item.items, function (childItem) {
                data.push(getItemData(childItem));
              });
            }
          }
        });
      }
    });

    return data;
  },

  render: function render() {
    return React.createElement(ConfigGroups, {
      groups: this.state.groups,
      handleChange: this.handleGroupsChange,
      onTestProc: this.props.onTestProc });
  }
});

module.exports = Configure;
//# sourceMappingURL=Configure.js.map
