'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var classNames = require('classnames');
var React = require('react');

var ConfigFieldSelect = React.createClass({
  displayName: 'ConfigFieldSelect',

  handleOnChange: function handleOnChange(ev) {
    if (this.props.handleChange) {
      this.props.handleChange(this.props.name, ev.target.value);
    }
  },

  render: function render() {
    var options = [];
    _.each(this.props.items, (function (item) {
      if (!_.isEmpty(item)) {
        options.push(React.createElement(
          'option',
          {
            key: item.name + '-option',
            value: item.name },
          item.value
        ));
      }
    }).bind(this));

    var inputClasses = classNames('form-control', {
      'readonly': this.props.readOnly
    });

    return React.createElement(
      'div',
      { className: 'field field-type-text' },
      React.createElement(
        'label',
        null,
        this.props.title
      ),
      React.createElement(
        'div',
        { className: 'input input-type-text' },
        React.createElement(
          'select',
          _extends({}, this.props.props, {
            value: this.props.value,
            readOnly: this.props.readOnly,
            onChange: this.handleOnChange,
            className: inputClasses }),
          options
        )
      )
    );
  }
});

module.exports = ConfigFieldSelect;
//# sourceMappingURL=ConfigFieldSelect.js.map
