{"version":3,"sources":["../../src/components/ConfigGroups.js"],"names":[],"mappings":";;AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;AAE7B,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC3C,IAAI,aAAa,GAAG,OAAO,CAAC,2BAA2B,CAAC,CAAC;;AAEzD,IAAI,YAAY,GAAG,KAAK,CAAC,WAAW,CAAC;;;AACnC,mBAAiB,EAAE,2BAAS,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE;AAC5D,QAAI,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;AAC3B,UAAI,CAAC,KAAK,CAAC,YAAY,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;KAC3D;GACF;;AAED,QAAM,EAAE,kBAAW;AACjB,QAAI,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAC9B,GAAG,CAAC,CAAA,UAAS,KAAK,EAAE;AACnB,UACE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IACjB,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,EACjD;AACA,eACE,oBAAC,WAAW;AACV,aAAG,EAAE,KAAK,CAAC,IAAI,AAAC;AAChB,gBAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,AAAC;AAC1B,eAAK,EAAE,KAAK,AAAC;AACb,sBAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,AAAC;AAC5D,oBAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,AAAC,GAAG,CACvC;OACH;KACF,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CACZ,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAC3B,KAAK,EAAE,CAAC;;AAEX,WACE;;QAAK,SAAS,EAAC,mBAAmB;MAC/B,MAAM;KACH,CACN;GACH;CACF,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC","file":"ConfigGroups.js","sourcesContent":["var _ = require('lodash');\nvar React = require('react');\n\nvar ConfigGroup = require('./ConfigGroup');\nvar ConfigService = require('../services/ConfigService');\n\nvar ConfigGroups = React.createClass({\n  handleGroupChange: function(groupName, itemName, value, data) {\n    if (this.props.handleChange) {\n      this.props.handleChange(groupName, itemName, value, data);\n    }\n  },\n\n  render: function() {\n    var groups = _(this.props.groups)\n      .map(function(group) {\n        if (\n          !_.isEmpty(group) &&\n          ConfigService.isEnabled(this.props.groups, group)\n        ) {\n          return (\n            <ConfigGroup\n              key={group.name}\n              groups={this.props.groups}\n              group={group}\n              handleChange={this.handleGroupChange.bind(this, group.name)}\n              onTestProc={this.props.onTestProc} />\n          );\n        }\n      }.bind(this))\n      .filter(_.negate(_.isEmpty))\n      .value();\n\n    return (\n      <div className=\"replicated-config\">\n        {groups}\n      </div>\n    );\n  },\n});\n\nmodule.exports = ConfigGroups;\n"]}