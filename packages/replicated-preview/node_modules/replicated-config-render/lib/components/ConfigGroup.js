'use strict';

var _ = require('lodash');
var React = require('react');

var ConfigItem = require('./ConfigItem');
var ConfigGroupDescription = require('./ConfigGroupDescription');
var ConfigTestWidget = require('./ConfigTestWidget');
var ConfigService = require('../services/ConfigService');

var ConfigGroup = React.createClass({
  displayName: 'ConfigGroup',

  isAtLeastOneItemVisible: function isAtLeastOneItemVisible() {
    return _.some(this.props.group.items, (function (item) {
      if (!_.isEmpty(item)) {
        return ConfigService.isVisible(this.props.groups, item);
      }
    }).bind(this));
  },

  handleItemChange: function handleItemChange(itemName, value, data) {
    if (this.props.handleChange) {
      this.props.handleChange(itemName, value, data);
    }
  },

  render: function render() {
    if (!this.isAtLeastOneItemVisible()) {
      return React.createElement('span', null);
    }

    var title = null;
    if (this.props.group.title) {
      title = React.createElement(
        'div',
        { className: 'col-xs-12 group-header' },
        React.createElement('a', { id: this.props.group.name }),
        React.createElement(
          'h3',
          { className: 'group-title' },
          this.props.group.title
        ),
        React.createElement('hr', null)
      );
    }

    var description = null;
    if (this.props.group.description) {
      description = React.createElement(ConfigGroupDescription, { text: this.props.group.description });
    }

    var items = [];
    _.each(this.props.group.items, (function (item) {
      if (!_.isEmpty(item)) {
        items.push(React.createElement(ConfigItem, {
          key: item.name,
          groups: this.props.groups,
          item: item,
          visible: ConfigService.isVisible(this.props.groups, item),
          handleChange: this.handleItemChange,
          onTestProc: this.props.onTestProc }));
      }
    }).bind(this));

    var testWidget = null;
    if (_.get(this.props.group, 'test_proc.command', null) && this.props.group.test_proc.command.length > 0) {
      testWidget = React.createElement(
        'div',
        { className: 'form-group col-xs-12' },
        React.createElement(ConfigTestWidget, {
          boundGroup: this.props.group.name,
          groups: this.props.groups,
          command: this.props.group.test_proc.command,
          timeout: this.props.group.test_proc.timeout,
          argFields: this.props.group.test_proc.arg_fields,
          displayName: this.props.group.test_proc.display_name,
          onTestProc: this.props.onTestProc })
      );
    }

    return React.createElement(
      'div',
      { className: 'config-group clearfix' },
      title,
      React.createElement(
        'div',
        { className: 'col-md-11' },
        React.createElement(
          'div',
          { className: 'row' },
          description,
          items,
          testWidget
        )
      )
    );
  }
});

module.exports = ConfigGroup;
//# sourceMappingURL=ConfigGroup.js.map
