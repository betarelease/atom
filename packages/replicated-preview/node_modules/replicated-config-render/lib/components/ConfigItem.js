'use strict';

var _ = require('lodash');
var classNames = require('classnames');
var React = require('react');

var ConfigItemTitle = require('./ConfigItemTitle');
// var ConfigItemDescription = require('./ConfigItemDescription');
// var ConfigGroupDescription = require('./ConfigGroupDescription');
var ConfigItemHelpText = require('./ConfigItemHelpText');
var ConfigTestWidget = require('./ConfigTestWidget');

var fields = {
  'select': React.createFactory(require('./ConfigFieldSelect')),
  'textarea': React.createFactory(require('./ConfigFieldTextArea')),
  'text': React.createFactory(require('./ConfigFieldText')),
  'password': React.createFactory(require('./ConfigFieldPassword')),
  'file': React.createFactory(require('./ConfigFieldFile')),
  'bool': React.createFactory(require('./ConfigFieldCheckbox')),
  'select_one': React.createFactory(require('./ConfigFieldSelectOne')),
  'select_many': React.createFactory(require('./ConfigFieldSelectMany')),
  'label': React.createFactory(require('./ConfigFieldLabel')),
  'heading': React.createFactory(require('./ConfigFieldHeading'))
};

var ConfigItem = React.createClass({
  displayName: 'ConfigItem',

  handleItemChange: function handleItemChange(name, value, data) {
    if (this.props.handleChange) {
      this.props.handleChange(name, value, data);
    }
  },

  render: function render() {
    var title = null;
    var description = null;
    var field = null;
    var testWidget = null;

    function getItemTestWidget(groups, item, onTestProc) {
      if (_.get(item, 'test_proc.command', null) && item.test_proc.command.length > 0) {
        // Item test proc will always have itself as the only argument
        var argFields = [item.name];
        return React.createElement(
          'div',
          { style: { marginTop: '10px' } },
          React.createElement(ConfigTestWidget, {
            boundItem: item.name,
            groups: groups,
            command: item.test_proc.command,
            timeout: item.test_proc.timeout,
            argFields: argFields,
            displayName: item.test_proc.display_name,
            onTestProc: onTestProc })
        );
      }
      return null;
    }

    if (this.props.item.type === 'label') {
      title = React.createElement(ConfigItemTitle, { title: this.props.item.title });
      /*
      if (_.get(this.props.item, 'description', null) && this.props.item.description.length > 0) {
        description = (
          <ConfigItemDescription text={this.props.item.description} />
        );
      }
      */
    } else if (this.props.item.type === 'heading') {
        title = React.createElement(
          'div',
          { className: 'config-group clearfix' },
          React.createElement(
            'h3',
            { className: 'group-title' },
            this.props.item.title
          )
        );
        /*
        if (_.get(this.props.item, 'description', null) && this.props.item.description.length > 0) {
          description = (
            <div className="row">
              <ConfigGroupDescription text={this.props.item.description} />
            </div>
          );
        }
        */
      } else {
          title = React.createElement(ConfigItemTitle, {
            title: this.props.item.title,
            required: this.props.item.required === true,
            recommended: this.props.item.recommended === true });
          /*
          if (_.get(this.props.item, 'description', null) && this.props.item.description.length > 0) {
            description = (
              <ConfigItemDescription text={this.props.item.description} />
            );
          }
          */
          testWidget = getItemTestWidget(this.props.groups, this.props.item, this.props.onTestProc);
        }

    var props = {
      title: title,
      name: this.props.item.name,
      value: this.props.item.value,
      multi_value: this.props.item.multi_value,
      'default': this.props.item['default'],
      props: this.props.item.props,
      readOnly: this.props.item.readonly === true,
      multiple: this.props.item.multiple === true,
      items: this.props.item.items || [],
      handleChange: this.handleItemChange
    };

    if (this.props.item.type in fields) {
      field = fields[this.props.item.type](props);
    } else if (this.props.item.type) {
      // unknown field type
      return null;
    }

    var helpText = null;
    if (_.get(this.props.item, 'help_text', null) && this.props.item.help_text.length > 0) {
      helpText = React.createElement(ConfigItemHelpText, { text: this.props.item.help_text });
    }

    var classes = classNames('form-group col-xs-12', {
      'col-sm-6': this.props.item.affix === 'left' || this.props.item.affix === 'right',
      'hidden': !this.props.visible
    });

    return React.createElement(
      'div',
      { className: classes },
      field,
      description,
      helpText,
      testWidget
    );
  }
});

module.exports = ConfigItem;
//# sourceMappingURL=ConfigItem.js.map
