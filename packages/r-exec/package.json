{
  "name": "r-exec",
  "main": "./lib/r-exec",
  "version": "0.3.5",
  "description": "Send R code to various R consoles",
  "activationCommands": {
    "atom-text-editor": [
      "r-exec:send-command",
      "r-exec:send-function",
      "r-exec:send-paragraph",
      "r-exec:send-knitr",
      "r-exec:setwd",
      "r-exec:set-chrome",
      "r-exec:set-iterm",
      "r-exec:set-iterm2",
      "r-exec:set-rapp",
      "r-exec:set-safari",
      "r-exec:set-terminal"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pimentel/atom-r-exec.git"
  },
  "keywords": [
    "R",
    "rstats",
    "code",
    "run",
    "runner"
  ],
  "license": "MIT",
  "engines": {
    "atom": ">1.0.0"
  },
  "dependencies": {
    "node-osascript": "1.0.2"
  },
  "readme": "# r-exec\n\nSend R code from Atom to be executed in R.app, Terminal, iTerm, or a web browser running RStudio Server on Mac OS X.  The current selection is sent or in the case of no selection the current line is sent.\n\n## Installation\n\n`apm install r-exec`\n\nor\n\nSearch for `r-exec` within package search in the Settings View.\n\n## Configuration\n\n### Keybindings\n\nWhile `cmd-enter` is bound to sending code in the package, it is also annoyingly bound to entering a new line by default in atom.\nIn order to make it work, you must add the following binding in `~/.atom/keymap.cson`:\n\n```javascript\n'atom-workspace atom-text-editor:not([mini])':\n  'cmd-enter': 'r-exec:send-command'\n```\n\n### Behavior\n\nAll configuration can be done in the settings panel. Alternatively, you can edit your configuration file as noted below.\n\nIn your global configuration file (`~/.atom/init.coffee`), you may set the following variables:\n\n- `r-exec.whichApp` which R application to use. Valid applications are:\n  - `R.app`: the default (the R GUI)\n  - `iTerm` or `Terminal`: Assumes the currently active terminal has R running\n  - `Safari` or `Google Chrome`: assumes the currently active tab has an active RStudio session running, with the console active\n- `r-exec.advancePosition`\n  - if `true`, go to the next line/paragraph after running the current line/paragraph\n  - if `false`, leave the cursor where it currently is\n- `r-exec.focusWindow`\n  - if `true`, focus the window before sending code\n  - if `false`, send the code in the background and stay focused on Atom. This is not possible when sending code to a browser\n- `r-exec.notifications`\n  - if `true`, notifications via `NotificationManager` when a paragraph or function is not identified\n\nThe default configuration looks like this:\n\n```javascript\natom.config.set('r-exec.whichApp', 'R.app')\natom.config.set('r-exec.advancePosition', false)\natom.config.set('r-exec.focusWindow', true)\natom.config.set('r-exec.notifications', true)\n```\n\n### Notes about iTerm\n\nThe iTerm2 Applescript API recently changed as of version 3.0.0.\nOlder versions of iTerm2 (< 3.0.0) are supported using mode `iTerm`.\nNewer versions of iTerm2 (>= 3.0.0) are supported using mode `iTerm2`.\n\n## Usage\n\n- `cmd-enter`: send code to configured application (`r-exec:whichApp`).\n- `shift-cmd-e`: change to current working directory of current file.\n- `shift-cmd-k`: send code between a knitr block (currently only RMarkdown supported).\n- `shift-cmd-u`: send function under current cursor. Currently, only functions that begin of the first column in and on the first column of a line are sent. An example:\n```r\nmyFunction <- function(x) {\n  # my code goes here\n}\n```\n- `shift-cmd-m`: send paragraph under current cursor. A paragraph is a region enclosed by whitespace.\n\n## Notes\n\nThis is very much in an **alpha** state and is a quick hobby project.  It is currently Mac-only because these things are easy to do with AppleScript.  Any help on the Windows or Linux side would be great.\n\nIn the RStudio Server case, the solution is pretty clunky - the code is sent to the clipboard and then a paste command is sent to Safari.  But it works.\n\n## TODO\n\n- Make the choice of which R.app to send the code to configurable, based on a project-level configuration variable (sometimes multiple copies of R.app are made so that multiple R GUIs can be running simultaneously for different projects).\n- In RStudio Server case, make sure active window really is RStudio Server before pasting, maybe by checking the  [title](http://www.alfredforum.com/topic/2013-how-to-get-frontmost-tab's-url-and-title-of-various-browsers/).\n- Error reporting.\n- Support for Windows and Linux.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pimentel/atom-r-exec/issues"
  },
  "homepage": "https://github.com/pimentel/atom-r-exec#readme",
  "_id": "r-exec@0.3.5",
  "_shasum": "4a7ee5536384df01113fb9d78197f583c6642afa",
  "_resolved": "file:../d-11655-65809-1mddulq/package.tgz",
  "_from": "../d-11655-65809-1mddulq/package.tgz",
  "_atomModuleCache": {
    "version": 1,
    "dependencies": [
      {
        "name": "node-osascript",
        "version": "1.0.2",
        "path": "node_modules/node-osascript/lib/index.js"
      },
      {
        "name": "buffers",
        "version": "0.1.1",
        "path": "node_modules/node-osascript/node_modules/buffers/index.js"
      }
    ],
    "extensions": {
      ".coffee": [
        "lib/r-exec.coffee"
      ],
      ".js": [
        "node_modules/node-osascript/Gruntfile.js",
        "node_modules/node-osascript/demos/externalFile/demo.js",
        "node_modules/node-osascript/demos/injectvariables/demos.js",
        "node_modules/node-osascript/demos/simpleDialog/dialog.js",
        "node_modules/node-osascript/lib/index.js",
        "node_modules/node-osascript/lib/osa-parser.js",
        "node_modules/node-osascript/lib/osa-vargen.js",
        "node_modules/node-osascript/node_modules/buffers/examples/slice.js",
        "node_modules/node-osascript/node_modules/buffers/examples/splice.js",
        "node_modules/node-osascript/node_modules/buffers/index.js"
      ],
      ".json": [
        "node_modules/node-osascript/node_modules/buffers/package.json",
        "node_modules/node-osascript/package.json",
        "package.json"
      ]
    },
    "folders": [
      {
        "paths": [
          "lib",
          ""
        ],
        "dependencies": {
          "node-osascript": "1.0.2"
        }
      },
      {
        "paths": [
          "node_modules/node-osascript",
          "node_modules/node-osascript/demos/externalFile",
          "node_modules/node-osascript/demos/injectvariables",
          "node_modules/node-osascript/demos/simpleDialog",
          "node_modules/node-osascript/lib",
          "node_modules/node-osascript/tests/independent",
          "node_modules/node-osascript/tests"
        ],
        "dependencies": {
          "buffers": "^0.1.1"
        }
      }
    ]
  }
}