#!/usr/bin/env node

var fs = require('fs');
var path = require('path');

var yargs = require('yargs')

var pkg = require('../package.json');
var Css2Stylus = require('../lib/css2stylus');

var log = {
  l: function (msg) { console.log(msg + '\033[0m'); },
  ok: function (msg) { this.l('\033[32m' + msg); },
  error: function (msg) { this.l('\033[31m' + msg); }
};

var args = yargs
  .version(pkg.version)
  .alias('version', 'v')
  .usage(
    '\nUsage: css2stylus [options] <file1.css> <file2.css>\n\n' +
    'Supports bash-style piping from stdin to stdout, e.g. `cat myFile.css | css2stylus` ' +
    'outputs myFile.css as stylus. Useful for integrating into an editor of choice.')
  .example('$0 -u -i 4 file1.css', 'Use 4 space ndent and convert file1.css while unprefixing.')
  .example('$0 -c file1.css file2.css', 'Preserve CSS syntax while converting multiple files.')
  .example('$0 file1.css -o styl', 'Save processed files files into the `styl` directoy')
  .describe('unPrefix', 'Un-prefix any property with vendor prefixes.')
    .alias('unPrefix', 'u')
    .boolean('unPrefix')
  .describe('cssSyntax', 'Keep CSS syntax punctuation.')
    .alias('cssSyntax', 'c')
    .boolean('cssSyntax')
  .describe('force', 'Overwrite existing .styl files')
    .alias('force', 'f')
    .boolean('force')
  .describe('indent', 'Set indentation level: «tab» or number (of spaces)')
    .alias('indent', 'i')
    .string('indent')
    .default('indent', '2')
  .describe('out', 'Specify an output directory')
    .alias('out', 'o')
    .string('out')
  .describe('keepColons', 'Keep colons: in rules')
    .alias('keepColons', ':')
    .boolean('keepColons')
  .argv;

var options = args;
var sdtdinData = '';
var beganProcessingFiles = false;

process.stdin.setEncoding('utf8');
process.stdin.on('data', function (data) {
  sdtdinData += data;
});

process.stdin.on('end', function () {
  var converter = new Css2Stylus.Converter(sdtdinData);
  var output = converter.processCss(options).getStylus();
  process.stdout.write(output);
});

process.stdin.resume();

args._.forEach(function (file) {
  var stylusFile, converter, stylusOutput;

  beganProcessingFiles = true;

  if (path.extname(file) === '.css') {

    readFile(file, function (fileContents) {
      stylusFile = path.basename(file, path.extname(file)) + '.styl';

      if (args.o) {
        stylusFile = path.join(args.o, stylusFile);
        mkdir(args.o);
      }

      if (!args.f && fs.existsSync(stylusFile)) {
        log.error(stylusFile + ' already exists. Use -f to override.');
        process.exit(1);
      }

      converter = new Css2Stylus.Converter(fileContents);
      log.l('Processing ' + file + ' ...');
      converter.processCss(options);
      stylusOutput = converter.getStylus();

      writeFile(stylusFile, stylusOutput, function () {
        if (file == args._[args._.length - 1]) {
          process.exit(0);
        }
      });
    });
  } else {
    throw new Error('Input file must be css!');
  }
});

function mkdir(dirpath, mode) {
  // Set directory mode in a strict-mode-friendly way.
  if (mode == null) {
    mode = parseInt('0777', 8) & (~process.umask());
  }
  dirpath.split(/[\/\\]/g).reduce(function(parts, part) {
    parts += part + '/';
    var subpath = path.resolve(parts);
    if (!(subpath && fs.existsSync(subpath))) {
      try {
        fs.mkdirSync(subpath, mode);
      } catch (e) {
        log.error('Unable to create directory "' + subpath + '" (Error code: ' + e.code + ').', e);
        throw e;
      }
    }
    return parts;
  }, '');
};

function readFile(file, callback) {
  return fs.readFile(file, 'utf-8', function (err, data) {
    if (err) {
      log.error('Error reading file: ' + file);
      throw err;
    }
    callback(data);
  });
};

function writeFile(file, contents, callback) {
  return fs.writeFile(file, contents, function (err, data) {
    if (err) {
      log.error('Error saving to: ' + file);
      throw err;
    }

    log.ok('Output saved to: ' + file);
    callback();
  });
};

// bit hacky, but only way to tell if stdin hasn't been passed and no arguments were passed either
// without this, script would just hang waiting for an EOF
setTimeout(function () {
  if (sdtdinData.length == 0 && !beganProcessingFiles) {
    yargs.showHelp();
    process.exit(1);
  }
}, 10);
